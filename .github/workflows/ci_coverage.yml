name: CI on Linux

on:
  push:
    branches:
      # Push events to branches matching refs/heads/main
      - 'main'
      # Push events to branches matching refs/heads/release*
      - 'release*'
  # Trigger after PR was unlabeled
  pull_request:
    types:
      - unlabeled
  # Enables a manual trigger, may run on any branch
  workflow_dispatch:

# Do not cancel on push events
concurrency:
  group: coverage-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: false # PRs will be canceled by the clang-format CI

env:
  CMAKE_VERSION: 3.16.9
  SHARG_NO_VERSION_CHECK: 1
  TZ: Europe/Berlin

defaults:
  run:
    shell: bash -ex {0}

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ubuntu-22.04
    timeout-minutes: 120
    if: github.repository_owner == 'seqan' || github.event_name == 'workflow_dispatch' || github.event.label.name == 'clang-format'
    strategy:
      fail-fast: true
      matrix:
        include:
          - name: "Coverage gcc12"
            cxx: "g++-12"
            cc: "gcc-12"
            build: coverage
            build_type: Debug

    steps:
      # How many commits do we need to fetch to also fetch the branch point?
      - name: Get fetch depth
        id: fetch_depth
        run: echo "depth=$(( ${{ github.event.pull_request.commits }} + 2 ))" >> $GITHUB_OUTPUT

      - name: Checkout
        uses: actions/checkout@v3
        with:
          path: sharg
          fetch-depth: ${{ steps.fetch_depth.outputs.depth }}
          submodules: true

      # To reuse scripts
      - name: Checkout SeqAn3
        uses: actions/checkout@v3
        with:
          repository: seqan/seqan3
          ref: aa3df18a6df59679e07e9fe2de4e0998a94af7e7
          path: seqan3
          fetch-depth: 1
          submodules: false

      - name: Configure APT
        continue-on-error: true
        run: bash ./seqan3/.github/workflows/scripts/configure_apt.sh

      - name: Install CMake
        run: bash ./seqan3/.github/workflows/scripts/install_cmake.sh

      - name: Install ccache
        run: |
          conda install --yes --override-channels --channel conda-forge ccache
          sudo ln -s $CONDA/bin/ccache /usr/bin/ccache

      - name: Install compiler ${{ matrix.cxx }}
        run: sudo apt-get install --yes ${{ matrix.cxx }}

      - name: Install gcovr
        env:
            CC: ${{ matrix.cc }}
        run: |
          sudo update-alternatives --install /usr/bin/gcov gcov /usr/bin/${CC/gcc/gcov} 100
          pip install gcovr==5.0

      - name: Load ccache
        uses: actions/cache@v3
        with:
          path: .ccache
          key: ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.ref }}-${{ github.run_number }}
          # Restoring: From current branch, otherwise from base branch, otherwise from any branch.
          restore-keys: |
            ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.ref }}
            ${{ runner.os }}-${{ matrix.name }}-ccache-${{ github.base_ref }}
            ${{ runner.os }}-${{ matrix.name }}-ccache-

      - name: Tool versions
        run: |
          env cmake --version
          env ${{ matrix.cxx }} --version

      - name: Configure tests
        env:
            CXX: ${{ matrix.cxx }}
            CC: ${{ matrix.cc }}
        run: |
          mkdir sharg-build
          cd sharg-build
          cmake ../sharg/test/${{ matrix.build }} -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
                                                  -DCMAKE_CXX_FLAGS="${{ matrix.cxx_flags }}" \
                                                  -DSHARG_VERBOSE_TESTS=OFF \
                                                  -DSHARG_COVERAGE_PARALLEL_LEVEL=2
          make -j2 gtest_build yaml-cpp

      - name: Build tests
        env:
          CCACHE_BASEDIR: ${{ github.workspace }}
          CCACHE_DIR: ${{ github.workspace }}/.ccache
          CCACHE_COMPRESS: true
          CCACHE_COMPRESSLEVEL: 12
          CCACHE_MAXSIZE: 125M
          CCACHE_IGNOREOPTIONS: "-fprofile-abs-path"
          GCOV: ${{ github.workspace }}/seqan3/.github/workflows/scripts/gcov.sh
        run: |
          ccache -z
          cd sharg-build
          make -k -j2
          ccache -sv

      - name: Submit coverage build
        uses: codecov/codecov-action@v3
        with:
          files: ${{ github.workspace }}/sharg-build/sharg_coverage.xml
          root_dir: ${{ github.workspace }}/sharg
